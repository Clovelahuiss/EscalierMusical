///DOCUMENT EXPLICATIF ICI : https://github.com/Clovelahuiss/EscalierMusical/blob/main/README.md

#include <Wire.h>
#include <VL53L0X.h>
#include <SoftwareSerial.h>
#include <DFRobotDFPlayerMini.h>
#include <RTClib.h>

// Configuration des broches
#define TX_PIN 10
#define RX_PIN 11

// Nombre de capteurs laser
#define NUM_SENSORS 12

// Seuils de distance en millimètres
#define MIN_DISTANCE 0
#define MAX_DISTANCE 1200
// Ajoutez ces lignes au début de votre code
#define TX_PIN2 8
#define RX_PIN2 9

SoftwareSerial mySoftwareSerial2(TX_PIN2, RX_PIN2);
DFRobotDFPlayerMini myDFPlayer2;


// Identifiants des fichiers audio sur la carte SD
int noteFiles[] = {
  1, 2, 3, 4, 5, 6, 7, 8,          // Do (C)
  9, 10, 11, 12, 13, 14, 15, 16,   // Do# (C#) / Réb (Db)
  17, 18, 19, 20, 21, 22, 23, 24,  // Ré (D)
  25, 26, 27, 28, 29, 30, 31, 32,  // Ré# (D#) / Mib (Eb)
  33, 34, 35, 36, 37, 38, 39, 40,  // Mi (E)
  41, 42, 43, 44, 45, 46, 47, 48,  // Fa (F)
  49, 50, 51, 52, 53, 54, 55, 56,  // Fa# (F#) / Solb (Gb)
  57, 58, 59, 60, 61, 62, 63, 64,  // Sol (G)
  65, 66, 67, 68, 69, 70, 71, 72,  // Sol# (G#) / Lab (Ab)
  73, 74, 75, 76, 77, 78, 79, 80,  // La (A)
  81, 82, 83, 84, 85, 86, 87, 88,  // La# (A#) / Sib (Bb)
  89, 90, 91, 92, 93, 94, 95, 96   // Si (B)
};


// Séquence des notes et dépendances

////////////////////////////////Musique De tous les jours/////////////////////////////////////

int marcheImperiale[] = { 5, 5, 5, 2, 12, 5, 2, 12, 5, 9, 9, 9, 10, 12, 8, 7, 6, 5, 5, 5, 2, 12, 5, 2, 12, 5 };
int clairDeLune[] = { 13, 13, 18, 18, 17, 17, 16, 16, 15, 15, 14, 14, 13 };
int frereJacques[] = { 1, 13, 3, 1, 1, 13, 3, 1, 3, 5, 3, 1, 5, 6, 1, 3, 1, 6, 5, 3, 1, 1, 13, 3, 1 };
int laCucaracha[] = { 9, 9, 10, 8, 9, 10, 9, 8, 8, 8, 9, 9, 10, 8, 9, 10, 9, 8, 8, 8 };
int twinkleTwinkle[] = { 1, 1, 5, 5, 6, 6, 5, 4, 4, 3, 3, 2, 2, 1, 5, 5, 4, 4, 3, 3, 2, 5, 5, 4, 4, 3, 3, 2, 1, 1, 5, 5, 6, 6, 5, 4, 4, 3, 3, 2, 2, 1 };
int panthereRose[] = { 5, 13, 17, 21, 5, 13, 17, 21, 13, 21, 25, 29, 13, 21, 25, 29, 21, 29, 33, 37, 29, 33, 37, 41, 33, 41, 45, 49, 33, 41, 45, 49, 45, 53, 57, 61, 45, 53, 57, 61, 57, 65, 69, 73, 57, 65, 69, 73, 69, 77, 81, 85, 69, 77, 81, 85, 77, 85, 89, 93 };
int Marseillaise[]= {57, 60, 61, 62, 61, 60, 57, 53, 52, 50, 57, 57, 57, 52, 53, 57, 57, 57, 60, 61, 62, 61, 60, 57, 53, 52, 50};a
int LaKiffance[]={65, 60, 57, 60, 57, 53, 57, 60, 65, 60, 57, 60, 57, 53, 57, 60};
/////////////////////////////////Chanson de Noël///////////////////////////////////////////////////

int douceNuit[] = { 3, 5, 6, 5, 3, 2, 1, 1, 3, 5, 6, 5, 3, 5, 4, 4, 5, 7, 8, 7, 5, 6, 5 };
int monBeauSapin[] = { 4, 6, 5, 4, 5, 6, 6, 8, 7, 6, 5, 4, 4, 6, 5, 4, 5, 6 };
int viveLeVent[] = { 1, 1, 6, 5, 4, 4, 4, 5, 6, 5, 4, 5, 3, 1, 1, 6, 5, 4, 4, 4, 5, 6, 5, 3, 5, 4 };
int jingleBells[] = { 3, 3, 3, 3, 3, 3, 3, 5, 1, 2, 3, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 5, 5, 4, 2, 1 };

////////////////////////////////Musique de Halloween////////////////////////////////////////////////

int thriller[] = { 40, 40, 40, 40, 38, 36, 38, 36, 38, 40, 38, 36, 38, 36, 38, 40, 45, 45, 43, 41, 43, 41, 43, 45, 40, 40, 40, 40, 38, 36, 38, 36, 38, 40, 38, 36, 38, 36, 38, 40, 45, 45, 43, 41, 43, 41, 43, 45, 45, 43, 41, 43, 41, 43, 45, 40, 40, 40, 40, 45, 43, 41, 43, 45, 40, 40, 40, 40, 45, 43, 41, 43, 45 };
int ghostbusters[] = { 40, 42, 44, 45, 44, 43, 42, 40, 44, 46, 47, 46, 45, 44, 40 };
int addamsFamily[] = { 37, 42, 45, 49, 52, 54, 52, 49, 45, 37, 42, 45, 49, 52, 54, 52, 49, 45, 37, 52, 52, 52, 52, 52, 52, 49, 45, 37, 42, 45, 49, 52, 54, 52, 49, 45, 37 };

////////////////////////////////////////////Event Spécial : Anniv etc //////////////////////////////////////////////////
int joyeuxAnniversaire[] = { 1, 1, 2, 1, 5, 4, 1, 1, 2, 1, 6, 5, 1, 1, 8, 7, 5, 4, 2, 8, 8, 7, 5, 6, 5 };

///////////////////////////////////////////////////////////////////////////////////////////////////////

int* noteSequence = marcheImperiale;  ///Musique par défaut on initialise noteSequence comme un pointeur qui va venir prendre les valeurs d'autres tableauc de façon volatile

bool isGoingUp = false;
bool isGoingDown = false;
bool firstDetection = true;
const int TE_EN_RETARD = 30;    // L'identifiant du fichier "t'es en retard" sur la carte SD
const int CETTE_HEURE_LA = 31;  // L'identifiant du fichier "c'est à cette heure là que tu pars ?" sur la carte SD
int currentNoteIndex = 0;
unsigned long lastDetectionTime = 0;
const unsigned long NOTE_DELAY = 200; // Délai minimum en millisecondes entre les notes
unsigned long lastNoteTime = 0;
// Initialisation des objets
SoftwareSerial mySoftwareSerial(TX_PIN, RX_PIN);
DFRobotDFPlayerMini myDFPlayer;
VL53L0X sensors[NUM_SENSORS];

RTC_DS3231 rtc;  // Utilisez RTC_DS1307 pour le module DS1307

void setup() {
  // Ajoutez ces lignes dans la fonction setup()
  mySoftwareSerial2.begin(9600);
  if (!myDFPlayer2.begin(mySoftwareSerial2)) {
    Serial.println(F("DFPlayer2: Erreur de communication."));
    while (true)
      ;
  }
  myDFPlayer2.volume(20);  // Régler le volume

  Serial.begin(9600);
  Wire.begin();

  mySoftwareSerial.begin(9600);

  if (!myDFPlayer.begin(mySoftwareSerial)) {
    Serial.println(F("DFPlayer: Erreur de communication."));
    while (true)
      ;
  }

  myDFPlayer.volume(20);  // Régler le volume

  // Initialiser les capteurs laser
  for (int i = 0; i < NUM_SENSORS; i++) {
    sensors[i].init();
    sensors[i].setTimeout(200);

  // Définir les adresses pour les capteurs
    sensors[i].setAddress(0x30 + i);
  }

  if (!rtc.begin()) {
    Serial.println("RTC non détecté !");
    while (1)
      ;
  }

  if (rtc.lostPower()) {
    Serial.println("RTC a perdu l'alimentation, réglez l'heure !");
    // rtc.adjust(DateTime(F(__DATE__), F(__TIME__))); // Décommente cette ligne pour régler l'heure avec l'heure de compilation
  }

  Serial.println(F("Escalier musical prêt."));
}

void loop() {
  DateTime now = rtc.now();  // Obtenir l'heure actuelle

  if (now.month() == 12 && now.day() >= 5 && now.day() <= 25) {  // Vérifie si la date est entre le 10 et le 25 décembre
    noteSequence = jingleBells;                                  // Mettre à jour noteSequence pour jouer "Jingle Bells"
  } 
  else if (now.month() == 5 && now.day() == 13) {  // Vérifie si la date est entre le 10 et le 25 décembre
    noteSequence = joyeuxAnniversaire;             // Mettre à jour noteSequence pour jouer "joyeux anniversaire"
  } 
  else if (now.hour() >= 17) {                                 // Vérifie si l'heure est supérieure ou égale à 17h
    noteSequence = clairDeLune;                                // Mettre à jour noteSequence pour jouer "Clair de lune"
  }   
  else {
    noteSequence = marcheImperiale;  // Mettre à jour noteSequence pour jouer la musique originale
  }

  bool detection = false;  // Variable pour indiquer si une détection a eu lieu

  for (int i = 0; i < NUM_SENSORS; i++) {
    uint16_t distance = sensors[i].readRangeSingleMillimeters();

    if (distance >= MIN_DISTANCE && distance <= MAX_DISTANCE) {
      detection = true;  // Indique qu'une détection a eu lieu

      if (firstDetection) {
        firstDetection = false;
        if (i == 0) {
          isGoingUp = true;
        } else if (i == NUM_SENSORS - 1) {
          isGoingDown = true;
        }
      }

      if (currentNoteIndex < sizeof(noteSequence) / sizeof(noteSequence[0])) {
        // Jouer la note suivante de la séquence
        int noteIndex = noteSequence[currentNoteIndex];
        myDFPlayer.play(noteFiles[noteIndex]);
        currentNoteIndex++;
        delay(50);  // Délai pour éviter les déclenchements multiples
      } else {
        // Réinitialiser l'index des notes si la séquence est terminée
        currentNoteIndex = 0;
      }
    }
  }


  ////////////////////////////////////////////////////////// Regarde si aucune detection//////////////////////////////////
  if (detection) {
    lastDetectionTime = millis();                     // Mettre à jour le temps de la dernière détection
  } else if (millis() - lastDetectionTime >= 5000) {  // Vérifie si aucune détection n'a eu lieu pendant 5 secondes
    currentNoteIndex = 0;                             // Réinitialiser l'index des notes
    firstDetection = true;                            // Réinitialiser la détection
  }
  /////////////////////////////////////////Regarde si qlq est resté sur une marche/////////////////////////////////////////

  if (detection) {
    unsigned long currentTime = millis();
    if (currentTime - lastNoteTime >= NOTE_DELAY) {
      lastNoteTime = currentTime;
      myDFPlayer.play(noteFiles[noteSequence[currentNoteIndex]]);
      currentNoteIndex++;
      if (currentNoteIndex >= sizeof(noteSequence) / sizeof(noteSequence[0])) {
        currentNoteIndex = 0;
      }
    }
  } else {
    firstDetection = true;
  }


  ///////////////////////////////////////////Evenement de descent et monter///////////////////////////////////////////
  if (isGoingUp && now.minute() <= 5) {
    if ((now.hour() >= 8) )) {  //// A toutes les heures passé : t'es en retard !!!!!!
      myDFPlayer2.play(TE_EN_RETARD);
    } 
    isGoingUp = false;  // Réinitialiser la direction
  }
  if (isGoingDown && now.minute()<=15) 
  {
    if (now.hour() >= 15) {  //// Apartir de 15h : tu pars maintenant ?????
      myDFPlayer2.play(CETTE_HEURE_LA);
    }
    isGoingDown = false;  // Réinitialiser la direction
  }
}
